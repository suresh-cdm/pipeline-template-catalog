library 'pipeline-library'
pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '2'))
    timeout(time: 10, unit: 'MINUTES')
    skipDefaultCheckout true
  }
  stages {
    stage('Validate CasC Bundle') {
      agent { label 'default' }
      when {
        beforeAgent true
        branch 'PR-*'
      }
      environment {
        API_TOKEN = credentials('api-token')
      }
      steps {
        checkout scm
        sh '''
          cd bundle
          yq -i 'del(.availabilityPattern)' bundle.yaml 
          yq -i 'del(.parent)' bundle.yaml
          yq -i '.catalog.[0]|= "plugin-catalog.yaml"' bundle.yaml
          yq -i '.items.[0]|= "admin-jobs.yaml"' bundle.yaml
          yq -i '.items += "pipelines.yaml"' bundle.yaml
          yq -i '.jcasc.[0]|= "jenkins.yaml"' bundle.yaml
          
          yq -i '. *= load("jcasc/credentials.yaml")' jcasc/jenkins.yaml
          yq -i '. *= load("jcasc/pipeline-policies.yaml")' jcasc/jenkins.yaml
          yq -i '. *= load("jcasc/pod-templates.yaml")' jcasc/jenkins.yaml

          cp items/admin-jobs/jobs.yaml ./admin-jobs.yaml
          cp items/pipelines/jobs.yaml ./pipelines.yaml
          rm -rf items
          cp jcasc/jenkins.yaml ./jenkins.yaml
          rm -rf jcasc
          curl https://raw.githubusercontent.com/cloudbees-days/workshop-casc-bundles/main/base/plugin-catalog.yaml > plugin-catalog.yaml
          zip -r bundle.zip ./*
          curl --user "$API_TOKEN_USR:$API_TOKEN_PSW" -XPOST \
            -H "Accept: application/json"  \
            -H "Content-type: application/zip" --data-binary "@./bundle.zip" \
            http://cbci-previews-demo-controller/cbci-previews-demo-controller/casc-bundle-mgnt/casc-bundle-validate > validation.json
          more validation.json
        '''
        script {
          def valid = sh(script: '''
            cat ./bundle/validation.json | jq -r '.valid'  | tr -d '\n'
           ''', returnStdout: true)
          if(valid=="false") {
            env.validationMessages = sh(script: '''
              cat ./bundle/validation.json | jq -r '."validation-messages"[0]' | tr -d '\n'
            ''', returnStdout: true)
            error "INVALID BUNDLE: $validationMessages"
          }
        }
      }
    }
    stage('Publish CasC Bundle Update Event') {
      agent { label 'default' }
      when {
        beforeAgent true
        branch 'main'
      }
      environment { CASC_UPDATE_SECRET = credentials('casc-update-secret') }
      steps {
        publishEvent event:jsonEvent("""
          {
            'controller':{'name':'${CASC_BUNDLE_ID}','action':'casc_bundle_update','bundle_id':'${CASC_BUNDLE_ID}'},
            'github':{'organization':'${repoOwner}','repository':'${repository}'},
            'secret':'${CASC_UPDATE_SECRET}',
            'casc':{'auto_reload':'false'}
          }
        """), verbose: true
      }
    }
  }
}
